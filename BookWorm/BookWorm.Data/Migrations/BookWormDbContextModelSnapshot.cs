// <auto-generated />
using System;
using BookWorm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookWorm.Data.Migrations
{
    [DbContext(typeof(BookWormDbContext))]
    partial class BookWormDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookWorm.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasDefaultValue("Test");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasDefaultValue("Test");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5ea65a0-7c43-4575-b825-24d2c12fe926"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4276e99-7e24-486f-b71c-7ce187505e19",
                            Email = "edgar.allan.poe@bookworm.com",
                            EmailConfirmed = false,
                            FirstName = "Edgar",
                            LastName = "Poe",
                            LockoutEnabled = true,
                            NormalizedEmail = "EDGAR.ALLAN.POE@BOOKWORM.COM",
                            NormalizedUserName = "EDGAR.ALLAN.POE@BOOKWORM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDTAR8wcodXIl9pQ8QGZeDMNYS4otxanV+OPfZivLuOFrMwvUi32SrUHYAQuiPIVSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MNGCJM2MITII262L7SZTKNPY7PRPJOH2",
                            TwoFactorEnabled = false,
                            UserName = "edgar.allan.poe@bookworm.com"
                        },
                        new
                        {
                            Id = new Guid("d470da45-fd3c-4a54-accd-6088db795dfa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdc117b5-2aa2-46a1-b7f0-3d577cf0d11c",
                            Email = "william.shakespeare@bookworm.com",
                            EmailConfirmed = false,
                            FirstName = "William",
                            LastName = "Shakespeare",
                            LockoutEnabled = true,
                            NormalizedEmail = "WILLIAM.SHAKESPEARE@BOOKWORM.COM",
                            NormalizedUserName = "WILLIAM.SHAKESPEARE@BOOKWORM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGdXj3rAQCeGfRHE3d4NrOwN1TSBHbOD803OIq3iPnMFTGt5+YhvTiwW+0EVzvHdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3BZWTPUWLSQAUOZXXWD6IXNCXDZM5R7O",
                            TwoFactorEnabled = false,
                            UserName = "william.shakespeare@bookworm.com"
                        },
                        new
                        {
                            Id = new Guid("dd34d4c5-95fb-4132-a14c-27fd7c53d919"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7bf6169-29b1-474f-9506-370fdd6a91fd",
                            Email = "emily.dickinson@bookworm.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Dickinson",
                            LockoutEnabled = true,
                            NormalizedEmail = "EMILY.DICKINSON@BOOKWORM.COM",
                            NormalizedUserName = "EMILY.DICKINSON@BOOKWORM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/paiLvb+6WVLvIc7m9Vf+zmEqmDkm1x6MDLq9/Zlf6uQbI7uoEIRUwOTlJd1vj8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QPUH2L4RXOISAQTVHN5GQAAIUTQA24BT",
                            TwoFactorEnabled = false,
                            UserName = "emily.dickinson@bookworm.com"
                        },
                        new
                        {
                            Id = new Guid("7886266b-1282-484a-a4b2-1dd2644a94d1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f13caeaf-6cbe-4608-8b5b-4434d2d282fd",
                            Email = "admin@bookworm.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@BOOKWORM.COM",
                            NormalizedUserName = "ADMIN@BOOKWORM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFAdC3im6xmdFIsf+MsIcopBuSNFz2HU15zaS5SjNu1VMUdSHfYa/iF0NxxiqNA9uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "T4DMIR6DSDAR5R7QTFMX6MR6QSOXGGHH",
                            TwoFactorEnabled = false,
                            UserName = "admin@bookworm.com"
                        },
                        new
                        {
                            Id = new Guid("81b3b5ec-c0ed-4a48-9575-924e159dedf5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfb269b1-7833-439e-aa6e-f1f9a3fc484d",
                            Email = "moderator1@bookworm.com",
                            EmailConfirmed = false,
                            FirstName = "Moderator",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "MODERATOR1@BOOKWORM.COM",
                            NormalizedUserName = "MODERATOR1@BOOKWORM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMajAP3maoVrRPWh5JTafBJE4KzjiKWZoF9LQd6/+xmPFuATvKwZbxIg0+i5mi15mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AVBJCLXQD6IX5FDGTE37SHAZGVJWUJVT",
                            TwoFactorEnabled = false,
                            UserName = "moderator1@bookworm.com"
                        },
                        new
                        {
                            Id = new Guid("5a6d7ad3-578d-4d81-a011-5ef359e80dbd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99567f57-06ea-41bf-9e53-6c165534fe5c",
                            Email = "moderator2@bookworm.com",
                            EmailConfirmed = false,
                            FirstName = "Moderator",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "MODERATOR2@BOOKWORM.COM",
                            NormalizedUserName = "MODERATOR2@BOOKWORM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvwkhYsdf6k7M0Sv27DYiRxk/kWHv0gNM3dKOEi92hpvt8/YPZZINufnQeDPzzOng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GBGKNZCL6MTHX3QHMAV4TISDHFRDBAF7",
                            TwoFactorEnabled = false,
                            UserName = "moderator2@bookworm.com"
                        });
                });

            modelBuilder.Entity("BookWorm.Data.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PoemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PoemId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.BookPoem", b =>
                {
                    b.Property<Guid>("PoemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("PoemId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookPoem", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Poem"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lyric Poety"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Elegy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ode"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sonnet"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ballad"
                        });
                });

            modelBuilder.Entity("BookWorm.Data.Models.ForumPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TagId");

                    b.ToTable("ForumPosts", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.Poem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(6500)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Poems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f169ebd-a1e4-463c-b97f-e003e938ee01"),
                            AuthorId = new Guid("d470da45-fd3c-4a54-accd-6088db795dfa"),
                            CategoryId = 5,
                            Content = "Shall I compare thee to a summer’s day?\r\nThou art more lovely and more temperate:\r\nRough winds do shake the darling buds of May,\r\nAnd summer’s lease hath all too short a date;\r\nSometime too hot the eye of heaven shines,\r\nAnd often is his gold complexion dimm'd;\r\nAnd every fair from fair sometime declines,\r\nBy chance or nature’s changing course untrimm'd;\r\nBut thy eternal summer shall not fade,\r\nNor lose possession of that fair thou ow’st;\r\nNor shall death brag thou wander’st in his shade,\r\nWhen in eternal lines to time thou grow’st:\r\n   So long as men can breathe or eyes can see,\r\n   So long lives this, and this gives life to thee.",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is William Shakespeare's work!",
                            IsDeleted = false,
                            IsPrivate = false,
                            Title = "Sonnet 18: Shall I compare thee to a summer’s day?"
                        },
                        new
                        {
                            Id = new Guid("f3486e89-b36e-4457-a10d-bc83d212df4f"),
                            AuthorId = new Guid("dd34d4c5-95fb-4132-a14c-27fd7c53d919"),
                            CategoryId = 6,
                            Content = "“Hope” is the thing with feathers -\r\nThat perches in the soul -\r\nAnd sings the tune without the words -\r\nAnd never stops - at all -\r\n\r\nAnd sweetest - in the Gale - is heard -\r\nAnd sore must be the storm -\r\nThat could abash the little Bird\r\nThat kept so many warm -\r\n\r\nI’ve heard it in the chillest land -\r\nAnd on the strangest Sea -\r\nYet - never - in Extremity,\r\nIt asked a crumb - of me.\r\n",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is Emily Dickinson's work!",
                            IsDeleted = false,
                            IsPrivate = false,
                            Title = "“Hope” is the thing with feathers"
                        },
                        new
                        {
                            Id = new Guid("f9cef858-688f-4ca2-bf18-bd060ba08f4b"),
                            AuthorId = new Guid("a5ea65a0-7c43-4575-b825-24d2c12fe926"),
                            CategoryId = 1,
                            Content = "From childhood’s hour I have not been\r\nAs others were—I have not seen\r\nAs others saw—I could not bring\r\nMy passions from a common spring—\r\nFrom the same source I have not taken\r\nMy sorrow—I could not awaken\r\nMy heart to joy at the same tone—\r\nAnd all I lov’d—I lov’d alone—\r\nThen—in my childhood—in the dawn\r\nOf a most stormy life—was drawn\r\nFrom ev’ry depth of good and ill\r\nThe mystery which binds me still—\r\nFrom the torrent, or the fountain—\r\nFrom the red cliff of the mountain—\r\nFrom the sun that ’round me roll’d\r\nIn its autumn tint of gold—\r\nFrom the lightning in the sky\r\nAs it pass’d me flying by—\r\nFrom the thunder, and the storm—\r\nAnd the cloud that took the form\r\n(When the rest of Heaven was blue)\r\nOf a demon in my view—",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is Edgar Allan Poe's work!",
                            IsDeleted = false,
                            IsPrivate = false,
                            Title = "Alone"
                        });
                });

            modelBuilder.Entity("BookWorm.Data.Models.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ForumPostId");

                    b.ToTable("Replies", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Downvotes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PoemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.HasIndex("PoemId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookWorm.Data.Models.Article", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.Poem", "Poem")
                        .WithMany("Articles")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Poem");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Book", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookWorm.Data.Models.BookPoem", b =>
                {
                    b.HasOne("BookWorm.Data.Models.Book", "Book")
                        .WithMany("BooksPoems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.Poem", "Poem")
                        .WithMany("BooksPoems")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Poem");
                });

            modelBuilder.Entity("BookWorm.Data.Models.ForumPost", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.Tag", "Tag")
                        .WithMany("ForumPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Poem", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", "Author")
                        .WithMany("Poems")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.Category", "Category")
                        .WithMany("Poems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Reply", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", "Author")
                        .WithMany("Replies")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.ForumPost", "ForumPost")
                        .WithMany("Replies")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ForumPost");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Review", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId");

                    b.HasOne("BookWorm.Data.Models.Poem", "Poem")
                        .WithMany("Reviews")
                        .HasForeignKey("PoemId");

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("Poem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWorm.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookWorm.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookWorm.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Poems");

                    b.Navigation("Replies");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Book", b =>
                {
                    b.Navigation("BooksPoems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Category", b =>
                {
                    b.Navigation("Poems");
                });

            modelBuilder.Entity("BookWorm.Data.Models.ForumPost", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Poem", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("BooksPoems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookWorm.Data.Models.Tag", b =>
                {
                    b.Navigation("ForumPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
